module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"p5\");\r\nvar PS5DrawingCanvas_1 = require(\"./drawing/PS5DrawingCanvas\");\r\nvar NoiseGenerator_1 = require(\"./noise/NoiseGenerator\");\r\nvar sketch = function (p) {\r\n    var drawingManager = new PS5DrawingCanvas_1.PS5DrawingCanvas(p);\r\n    var width = 640;\r\n    var height = 480;\r\n    p.setup = function () {\r\n        p.createCanvas(width, height);\r\n    };\r\n    p.draw = function () {\r\n        new NoiseGenerator_1.NoiseGenerator(width, height).draw(drawingManager);\r\n    };\r\n};\r\nnew p5(sketch);\r\n//# sourceMappingURL=sketch.js.map",
dependencies: ["p5","./drawing/PS5DrawingCanvas","./noise/NoiseGenerator"],
sourceMap: "{\"version\":3,\"file\":\"sketch.js\",\"sourceRoot\":\"\",\"sources\":[\"/src/sketch.ts\"],\"names\":[],\"mappings\":\";;AAAA,cAAY;AAEZ,+DAA4D;AAG5D,yDAAsD;AAEtD,IAAM,MAAM,GAAG,UAAS,CAAK;IAC3B,IAAM,cAAc,GAAG,IAAI,mCAAgB,CAAC,CAAC,CAAC,CAAC;IAE/C,IAAM,KAAK,GAAG,GAAG,CAAC;IAClB,IAAM,MAAM,GAAG,GAAG,CAAC;IAEnB,CAAC,CAAC,KAAK,GAAG;QACR,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,CAAC,CAAC,IAAI,GAAG;QAKP,IAAI,+BAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAMzD,CAAC,CAAA;AACH,CAAC,CAAC;AAEF,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC\",\"sourcesContent\":[\"import 'p5';\\r\\n\\r\\nimport {PS5DrawingCanvas} from './drawing/PS5DrawingCanvas';\\r\\nimport {Triangle} from './elements/EquilateralTriangle';\\r\\nimport {SerpinskiTriangle} from './elements/SerpinskiTrianagle';\\r\\nimport {NoiseGenerator} from './noise/NoiseGenerator';\\r\\n\\r\\nconst sketch = function(p: p5) {\\r\\n  const drawingManager = new PS5DrawingCanvas(p);\\r\\n\\r\\n  const width = 640;\\r\\n  const height = 480;\\r\\n\\r\\n  p.setup = function() {\\r\\n    p.createCanvas(width, height);\\r\\n  };\\r\\n\\r\\n  p.draw = function() {\\r\\n    // new Line(drawingManager, 200, 200, 400, 400).draw();\\r\\n    //    if (p.mouseIsPressed) {\\r\\n    // new Triangle(drawingManager, p.mouseX, p.mouseY, 500).draw();\\r\\n    // new SerpinskiTriangle(p.mouseX, p.mouseY, 200).draw(drawingManager);\\r\\n    new NoiseGenerator(width, height).draw(drawingManager);\\r\\n    // line.erase();\\r\\n    //   } else {\\r\\n    // line.draw();\\r\\n    // f(p, 200);\\r\\n    //  }\\r\\n  }\\r\\n};\\r\\n\\r\\nnew p5(sketch);\"]}",
headerContent: undefined,
mtime: 1522900834761,
devLibsRequired : undefined,
_ : {}
}
